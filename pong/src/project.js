
// project.js
//
// Copyright (C) 2014, 2017 Kano Computing Ltd
// License: GNU GPLv2 http://www.gnu.org/licenses/gpl-2.0.txt
//
// Create project object, put all project objects and class in here
//

var Project = new ProjectBase(
	16,
	'make-pong/pong/content/' + getUserLanguage() + '/pong-tutorial.xml',
	'pong'
);

Project.onload = function() {
    ProjectBase.prototype.init.call(Project);
};


Project.levelUpCaching = function(newLevel) {
    // Copy the cached blocks to the new level.
    if ('BlocklyStorage' in window) {
        if (newLevel < 5) {
            BlocklyStorage.migrateCache();
        } else if (newLevel == 5) {
            BlocklyStorage.migrateCacheLevels(4, 5, Project.challenge.count);
            BlocklyStorage.migrateCacheLevels(4, 6, Project.challenge.count);
        } else if (newLevel == 7) {
            for (var x = newLevel; x <= Project.challenge.count; x++) {
                BlocklyStorage.migrateCacheLevels(newLevel - 1, x, Project.challenge.count);
            }
        }
    }
};

/*
 * Sends the user to the seleted level stored in localStorage
 */
Project.goToStored = function(callback) {
    $('.shareDialog').stop().hide();
    if (typeof callback === 'function') {
        var level = callback();
        Project.switch(level);
    }
};

Project.getLastVisited = function() {
    var level = localStorage.pongLastLevelVisited;
    if (typeof level === 'undefined' || level === null) {
        localStorage.pongLastLevelVisited = Project.level;
        return Number(localStorage.pongLastLevelVisited);
    }
    return Number(localStorage.pongLastLevelVisited);
};

Project.setLastVisited = function(projectNumber) {
    localStorage.pongLastLevelVisited = projectNumber;
};

/**
 * Retrieves the code generated by the blocks
 * @return {string}  Code generated by the blocks
 */
Project.getCode = function() {
    var paddleBot = Project.level < 16 || Project.getLastVisited() != 16,
        code = Blockly.Generator.workspaceToCode('Python', paddleBot);

    return code;
};

/*
 * Decides whether user can level up. Checks to see if the workspace has the blocks required for levelling up.
 */
Project.levelUp = function(code) {
    var blocks = Blockly.mainWorkspace.getTopBlocks(true);

    // Alert user if a block is sitting on the workspace that perhaps shouldn't be
    // e.g. the rebound block sitting alone can cause odd results
    for (var x = 0, block; block = blocks[x]; x++) {
        if (block.getChildren().length === 0) {
            if (!block.canBeAlone) {
                AlertsMessages.error.displayMsg(Language.alert.blockAlone);
                }
        }
    }

    ProjectBase.prototype.levelUp.call(Project, code);
};


Project.isLevelComplete = function(code, data) {
    var blocks = Blockly.mainWorkspace.getTopBlocks(true);
    var generator = Blockly.Generator.get('Python');

    switch (data) {
    /**
     * Challenge 1 - Make
     * For the first level, user only needs to click the Make button
     */
    case 1:
        return true;


    /**
     * Challenge 2 - Paint the board
     * User needs to use the board block to progress
     */
    case 2:
        if (code.indexOf('frame_colour = GREY') == -1 && 
            code.indexOf('background_image = None') == -1) {
            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.noLevelUp);
        break;


    /**
     * Challenge 3 - Big Balls
     * User needs to use a ball block to progress, and to change the size of the ball
     */
    case 3:
        if (code.indexOf('ball_size = 15') == -1) {
            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.changeBallSize);
        break;


    /**
     * Challenge 4 - Zippy Balls
     * User needs to use a ball block to progress, change the speed
     */
    case 4:
        if (code.indexOf('speed_x, speed_y = 15., 15.') == -1 &&
            code.indexOf('speed_x, speed_y = 15, 15') == -1) {

            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.changeBallSpeed);
        break;


    /**
     * Challenge 5 - Crazy Ball
     * TODO
     */
    case 5:
        if (code.indexOf('        ball_size = abs(int(ball_x))\n') != -1 ||
            code.indexOf('        ball_size = abs(int(ball_y))\n') != -1) {
            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.noLevelUp);
        break;


    /**
     * Challenge 6 - Name your game
     * The user needs the title block and to have changed the default title.
     */
    case 6:
        if (code.indexOf('pong_title_text = "Pong"') === -1) {
            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.addTitle);
        break;


    /**
     * Challenge 7 - Instant rebound
     * If the key is pressed, rebound the ball
     * HACKY SOLUTION - key pressed is an array and we don't know which
     *                  index the code we want could be on
     */
    case 7:
        for (var n = 0; n < 6; n++) {
            if (code.indexOf('        if keyPressed[' + n + ']:\n' +
                            '          speed_x = -speed_x\n' +
                            '          hits += 1\n') != -1) {
                return true;
            }
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.instantRebound);
        break;


    /**
     * Challenge 8 - Instant win
     * When the key is pressed, the user wins
     */
    case 8:
        for (var n = 0; n < 6; n++) {
            if (code.indexOf('        if keyPressed[' + n + ']:\n          win = 1') != -1) {
                return true;
            } else if (code.indexOf('        if keyPressed[' + n + ']:\n          win = 2') != -1) {
                AlertsMessages.hint.displayMsg(Language.alert.hint.otherPlayerWins);
                return false;
            }
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.instantWin);
        break;


    /**
     * Challenge 9 - Disco ball
     * Change colour of ball and both paddles to a random colour on every collision
     */
    case 9:
        //"#Custom collision code" only appears when we've added an "if hit" statement to the workspace
        if (code.indexOf('                # Custom collision code') != -1 &&
            code.indexOf('                bar1_colour = (random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1))') != -1 &&
            code.indexOf('                bar2_colour = (random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1))') != -1 &&
            code.indexOf('                ball_colour = (random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1))') != -1) {
            return true;
        } else if (code.indexOf('\n        bar1_colour = (random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1))') != -1 ||
                  code.indexOf('\n        bar2_colour = (random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1))') != -1 ||

                  code.indexOf('\n        ball_colour = (random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1), random.randint(0, 2**8 - 1))') != -1) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.outsideIfHit);
            return false;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.allRandomColours);
        break;


    /**
     * Challenge 10 - 10 Points to win
     * Make user win when their score is 10
     */
    case 10:
        if (code.indexOf('        if score_1 == 10.:\n          win = 1') != -1 ||
            code.indexOf('        if 10. == score_1:\n          win = 1') != -1) {
            return true;
        } else if (code.indexOf('        if score_1 == 10.:\n          win =') != -1 ||
                   code.indexOf('        if 10. == score_1:\n          win =') != -1) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.otherPlayerWins);
            return false;
        } else if (code.indexOf('        if score_2 == 10.:\n          win =') != -1 ||
                   code.indexOf('        if 10. == score_2:\n          win =') != -1) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.wrongPlayerScore);
            return false;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.isScoreTen);
        break;


    /**
     * Challenge 11 - Make it Noisy
     * Play a sound every hit
     */
    case 11:
        var max_prio = 0,
            msg;

        var set_msg = function(_msg, prio) {
            if (prio > max_prio) {
                max_prio = prio;
                msg = _msg;
            }
        };

        for (var x = 0, block; block = blocks[x]; x++) {
            if (block.type !== 'controls_if') {
                // Need an if
                set_msg(Language.alert.hint.needIf, 1);
                continue;
            }

            var if_blk = block,
                condition = if_blk.getInputTargetBlock('IF0');

            if (!condition && condition.type !== 'pong_collision') {
                // The if needs a collision event
                set_msg(Language.alert.hint.needCollision, 2);
                continue;
            }

            var do_blk = if_blk.getInputTargetBlock('DO0');

            if (!do_blk && do_blk.type !== 'pong_playSound') {
                // Need the play sound block
                set_msg(Language.alert.hint.needPlaySound, 3);
                continue;
            }

            return true;

        }

        AlertsMessages.hint.displayMsg(msg);
        break;


    /**
     * Challenge 12 - Invisible wall
     * Invisible wall in middle of screen
     */
    case 12:
        if (code.indexOf('        if ball_x < WINDOW_WIDTH/2:\n          speed_x = -speed_x\n          hits += 1') != -1 ||
            code.indexOf('        if WINDOW_WIDTH/2 > ball_x:\n          speed_x = -speed_x\n          hits += 1') != -1 ||
            code.indexOf('        if ball_x <= WINDOW_WIDTH/2:\n          speed_x = -speed_x\n          hits += 1') != -1 ||
            code.indexOf('        if WINDOW_WIDTH/2 >= ball_x:\n          speed_x = -speed_x\n          hits += 1') != -1) {
            return true;
        } else if (code.indexOf('        if ball_x > WINDOW_WIDTH/2:\n          speed_x = -speed_x\n          hits += 1') != -1 ||
            code.indexOf('        if WINDOW_WIDTH/2 < ball_x:\n          speed_x = -speed_x\n          hits += 1') != -1 ||
            code.indexOf('        if ball_x >= WINDOW_WIDTH/2:\n          speed_x = -speed_x\n          hits += 1') != -1 ||
            code.indexOf('        if WINDOW_WIDTH/2 <= ball_x:\n          speed_x = -speed_x\n          hits += 1') != -1) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.wrongSize);
            return false;
        } else if (code.indexOf('        if ball_y < WINDOW_HEIGHT/2') != -1 ||
            code.indexOf('        if ball_y > WINDOW_HEIGHT/2') != -1 ||
            code.indexOf('        if ball_y < WINDOW_WIDTH/2') != -1 ||
            code.indexOf('        if ball_y > WINDOW_WIDTH/2') != -1 ||
            code.indexOf('        if WINDOW_WIDTH/2 > ball_y:') != -1 ||
            code.indexOf('        if WINDOW_WIDTH/2 < ball_y:') != -1 ||
            code.indexOf('        if ball_x < WINDOW_HEIGHT/2:') != -1 ||
            code.indexOf('        if ball_x > WINDOW_HEIGHT/2:') != -1 ||
            code.indexOf('        if WINDOW_HEIGHT/2') != -1) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.xNotY);
            return false;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.greaterOrLessThan);
        break;


    /**
     * Challenge 13 - Paddle Shrink
     * Half the size of player 2 when player 1 scores
     */
    case 13:
        if (code.indexOf('            #Custom goal code\n' +
                        '            bar2_height = abs(bar2_height / 2)') != -1) {
            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.halfSizeOfPlayer2);
        break;


    /**
     * Challenge 14 - Turbo mode
     * Increase the ball speed every hit
     */
    case 14:
        for (var x = 0, block; block = blocks[x]; x++) {

            if (block.type == 'controls_if') {
                var line = generator.blockToCode(block);
                if (line.indexOf('collision') != -1) {
                    //speed_y is some unique code from the speed setter block referring to the ball
                    if (line.indexOf('speed_y') != -1) {
                        if (line.indexOf('abs(speed_x) +') != -1 || line.indexOf('+ abs(speed_x)') != -1) {
                            if (line.indexOf('abs(speed_x) + 0') != -1 || line.indexOf('(0. + abs(speed_x)') != -1 || line.indexOf('(0 + abs(speed_x)') != -1) {
                                AlertsMessages.hint.displayMsg(Language.alert.hint.speedUpBall);
                                return false;
                            } else {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.turboMode);
        break;


    /**
     * Challenge 15 - Monster Ball
     * The ball should get bigger everytime it is hit
     */
    case 15:
        for (var x = 0, block; block = blocks[x]; x++) {

            if (block.type == 'controls_if') {
                var line = generator.blockToCode(block);
                if (line.indexOf('collision') != -1) {
                    //speed_y is some unique code from the speed setter block referring to the ball
                    if (line.indexOf('ball_size') != -1) {
                        if (line.indexOf('abs(int(ball_size +') != -1 ||
                            line.indexOf('+ ball_size))') != -1 ||
                            line.indexOf('* ball_size))') != -1 ||
                            line.indexOf('abs(int(ball_size *') != -1) {

                            if (line.indexOf('abs(int(ball_size + 0') != -1 ||
                                line.indexOf('abs(int(0. + ball_size))') != -1 ||
                                line.indexOf('abs(int(0 + ball_size)') != -1 ||
                                line.indexOf('abs(int(0 * ball_size)') != -1 ||
                                line.indexOf('abs(int(0. * ball_size)') != -1 ||
                                line.indexOf('abs(int(1. * ball_size)') != -1 ||
                                line.indexOf('abs(int(ball_size * 0') != -1 ||
                                line.indexOf('abs(int(ball_size * 1.)') != -1) {

                                AlertsMessages.hint.displayMsg(Language.alert.hint.increaseBallSize);
                                return false;
                            } else {
                                if (code.indexOf('# Custom goal code\n            ball_size = abs(int(15))') != -1) {
                                    return true;
                                } else {
                                    AlertsMessages.hint.displayMsg(Language.alert.hint.resetSpeed);
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        AlertsMessages.hint.displayMsg(Language.alert.hint.monsterBall);
        break;


    /**
     * Challenge 16 - 2 Player
     * If up is pressed, move player 2 up. If down is pressed, move player 2 down.
     */
    case 16:
        var up = false;
        var down = false;
        var stringUp = '1';
        var stringDown = '2';
        var line = ''; //so is in scope
        for (var x = 0, block; block = blocks[x]; x++) {

            if (block.type == 'controls_if') {
                line = generator.blockToCode(block);
                var index = line.indexOf('event.key');
                if (index != -1) {
                    if (line.indexOf('bar2_y += inc_bar2') != -1) {
                        down = true;
                        stringUp = line.substring(index, line.indexOf(':', index));
                    }
                    if (line.indexOf('bar2_y -= inc_bar2') != -1) {
                        up = true;
                        stringDown = line.substring(index, line.indexOf(':', index));
                    }
                    if (line.indexOf('K_UP') != -1 || line.indexOf('K_DOWN') != -1) {
                        AlertsMessages.hint.displayMsg(Language.alert.hint.sameKeysPlayers);
                        return false;
                    }
                }
            }
        }

        if (up && !down) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.onePlayer + 'down');
            return false;
        } else if (!up && down) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.onePlayer + 'up');
            return false;
        } else if (stringUp == stringDown && up && down) {
            AlertsMessages.hint.displayMsg(Language.alert.hint.sameUpDown);
            return false;
        } else if (up && down) {
            return true;
        }
        AlertsMessages.hint.displayMsg(Language.alert.noLevelUp);
        break;
    }

    return false;
};
